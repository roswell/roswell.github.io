#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp
  (ql:quickload
   '(:cl-emb 
     :alexandria 
     :cl-arrows 
     :cl-ppcre
     :markdown.cl)
   :silent t)
  )

(defpackage :ros.script.generate.3714898984
  (:use :cl :cl-arrows))
(in-package :ros.script.generate.3714898984)

(defun index ()
  (flet ((extract (s)
           (cond ((ppcre:scan "^\\[\\[.+\\]\\]$" s)
                  (let* ((name (ppcre:regex-replace-all "^\\[\\[|\\]\\]$" s ""))
                         (link (format nil "~A.html" (ppcre:regex-replace-all " " name "-"))))
                    `(:type page :name ,name :link ,link)))
                 ((ppcre:scan "#+" s)
                  (let* ((name (ppcre:regex-replace-all (format nil "#+ *|~%") s "")) )
                    `(:type category :name ,name :pages ,(make-list 0))))))
         (accumlate (m s)
           (if (null m)
               (list s)
               (let ((name (getf (car m) :name))
                     (pages (getf (car m) :pages)))
                 (if (eql 'category (getf s :type))
                     (cons s (cons `(:type category :name ,name :pages ,(reverse pages)) (cdr m)))
                     (cons `(:type category :name ,name :pages ,(cons s pages)) (cdr m)))))))                
    (-<>> (alexandria:read-file-into-string #p"roswell.wiki/_Sidebar.md")
          (cl-ppcre:all-matches-as-strings (format nil "\\[\\[.+\\]\\]|#+.+~%"))
          (mapcar #'extract)
          (reduce #'accumlate <> :initial-value nil)
          reverse)))

(defun page (source)
  (let* ((name (pathname-name source))
         (output (pathname (format nil "~A.html" name)))
         (title (ppcre:regex-replace-all "-" name " ")))
    (-<>> (markdown.cl:parse-file source)
          (ppcre:regex-replace-all "<table>" <> "<table class=\"table table-bordered\">")
          (ppcre:regex-replace-all "\\[\\[|\\]\\]" <> "")
          (list :index (index) :title title :content)
          (emb:execute-emb "page" :env)
          (alexandria:write-string-into-file <> output :if-exists :supersede))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (emb:register-emb "page" #p"page.tpl")
  (mapc #'page (set-difference (directory "**/*.md") (directory "**/_*.md"))))

;;; vim: set ft=lisp lisp:
